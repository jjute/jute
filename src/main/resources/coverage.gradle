/*
 * This is an initialization script that enables project code coverage.
 * Code coverage is a measure used to describe the degree to which the
 * source code is executed when a particular test suite runs.
 *
 * Code coverage data can be locally generated by calling 'jacocoTestReport',
 * which can then be displayed online with SVG badges using Coveralls.
 * To upload coverage reports call 'coveralls' after generating reports with Jacoco.
 *
 * NOTE: this script has to be manually called with '--init-script' env option.
 */
initscript {
    repositories {
        /*
         * Used for resolving community gradle plugins
         */
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        /*
         * Enables remote code coverage via Coveralls:
         * a web service that helps track code coverage over time
         * https://coveralls.io/
         */
        classpath "gradle.plugin.com.github.kt3k.coveralls:coveralls-gradle-plugin:2.8.4"
    }
}

allprojects {
    /*
     * The Java Library plugin expands the capabilities of the Java plugin by providing specific
     * knowledge about Java libraries. In particular, a Java library exposes an API to consumers
     * (i.e., other projects using the Java or the Java Library plugin). All the source sets, tasks
     * and configurations exposed by the Java plugin are implicitly available when using this plugin.
     *
     * Read the official plugin documentation here:
     * https://docs.gradle.org/current/userguide/java_library_plugin.html
     */
    apply plugin: 'java-library'

    /*
     * The JaCoCo plugin provides code coverage metrics for Java code via integration with JaCoCo.
     * JaCoCo is a free code coverage library for Java that provides a new standard technology for
     * code coverage analysis in Java VM based environments. The focus is providing a lightweight,
     * flexible and well documented library for integration with various build and development tools.
     *
     * Read the official plugin documentation here:
     * https://docs.gradle.org/current/userguide/jacoco_plugin.html
     */
    apply plugin: 'jacoco'
    
    // Implements 'coveralls' task written for use by CI systems to send code coverage.
    // https://github.com/kt3k/coveralls-gradle-plugin
    apply plugin: org.kt3k.gradle.plugin.CoverallsPlugin

    /*
     * Task to generate HTML, Xml and CSV reports of Jacoco coverage data.
     */
    jacocoTestReport {

        // Run the tests before generating the report
        dependsOn test

        reports {
            // The JaCoCo (single file) XML report
            xml.enabled = true
            // The JaCoCo HTML report
            html.enabled = true
        }
        doFirst {
            logger.debug("Generating code coverage...")
        }
        doLast {
            logger.quiet("Finished generating code coverage.")
        }
    }
    /* Generate test reports before running all checks.
     * This will make sure that reports are generated before
     * we send them to our remote code coverage service.
     */
    check.dependsOn jacocoTestReport
}
